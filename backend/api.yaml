openapi: "3.0.0"
info:
  description: "Api Specification to sirius app."
  title: "Sirius"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "David Morales"
    email: "morales.david1997@gmail.com"
  version: "1.0.0"
servers:
  - url: 'http://localhost:4000/api'
    description: "Local Development Server"
tags:
  - name: "Home"
    description: "Home Endpoints"
  - name: "Products"
    description: "Product Operations"
paths:
  /:
    get:
      tags:
        - "Home"
      description: "Return a welcome message."
      responses:
        '200':
          description: "A Welcome message"
          content:
            application/json:
              schema:
                type: string
                default: "Server is running OK."
  /products:
    get:
      tags:
        - "Products"
      description: "Returns a list of products."
      responses:
        "200":
          description: "List of products"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  "$ref": "#/components/schemas/Product"
        "404":
          "$ref": "#/components/responses/NoContent"
        "500":
          "$ref":  "#/components/responses/InternalServer"
    post:
      tags:
        - "Products"
      description: "Create a new product"
      requestBody:
        "$ref": "#/components/requestBodies/ProductRequest"
      responses:
        "201":
          description: "Product created"
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/Product"
        "400":
          "$ref": "#/components/responses/BadRequest"
        "500":
          "$ref":  "#/components/responses/InternalServer"

  /products/{productId}:
    get:
      tags:
        - "Products"
      description: "Find product by ID"
      parameters:
        - "$ref":  "#/components/parameters/ProductId"
      responses:
        "200": 
          "$ref": "#/components/responses/ProductResponse"
    put:
      tags:
        - "Products"
      description: "Update a exiting product"
      parameters:
        - "$ref": "#/components/parameters/ProductId"
      requestBody:
        "$ref": "#/components/requestBodies/ProductRequest"
      responses:
        "204":
          "$ref": "#/components/responses/NoContent"
        "400":
          "$ref": "#/components/responses/BadRequest"
        

components:
  schemas:
    BaseError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Product:
      type: object
      required:
        - "name"
        - "description"
        - "price"
        - "info"
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            type: string
        price:
          type: object
          required:
            - "currency"
            - "amount"
          properties:
            currency:
              type: string
            amount:
              type: number
        sold:
          type: boolean
          default: false
        info:
          type: object
          required:
            - "condition"
          properties:
            condition:
              type: string
            haveDelivery:
              type: boolean
            location:
              type: string
        properties:
          type: array
          items:
            type: object
            properties:
              propertyName:
                type: string
              propertyValue:
                type: string
        tags:
          type: array
          items:
            type: string
        createdDate:
            type: string
            format: date
            readOnly: true

  parameters:
    ProductId:
      name: "productId"
      in: path
      required: true
      schema:
        type: string
  
  requestBodies:
    ProductRequest:
      required: true
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Product"
        application/x-www-form-urlencoded:
          schema:
            "$ref": "#/components/schemas/Product"

  responses:
    NotFound:
      description: Entity Not Found.
      content:
        application/json:
          schema:
            type: object
            "$ref": "#/components/schemas/BaseError"
    NoContent:
      description: Entity Not Found.
      content:
        application/json:
          schema:
            type: object
            "$ref": "#/components/schemas/BaseError"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            "$ref": "#/components/schemas/BaseError"
    InternalServer:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            "$ref": "#/components/schemas/BaseError"
    ProductResponse:
      description: "Product"
      content:
        application/json:
          schema:
            type: object
            "$ref":  "#/components/schemas/Product"
